begin
	external class demos="/usr/local/share/cim/demos.atr";
	demos
	begin
        
        ref(WAITQ) queue;
        ref(Tally) delay, sessionLength;
        ref(RDist) Send, serve;
        integer Ptot;
        
        Entity class User;
            begin
                ref(Bin) buffer;
                integer Pi;
                buffer :- new Bin("buffer", 0);
                Pi := 1;
                
                SessionStart:= time;
                A:
                        if Pi < Ptot then begin
                                new Packet(edit("packet",Pi), buffer).schedule(now);
                                hold(Send.sample); 
                                Goto A;
                        end;
                        
                buffer.take(1000);
                SessionLength.update(time-SessionStart);
                 end;


         Entity class Packet(buffer);
            ref(Bin) buffer;
            begin
                timestamp:= time;
                queue.wait;
                delay.update(time-timestamp);
                buffer.give(1);
            end;


        Entity class Network(queue,serve, Ptot);
        begin
                ref(Packet) packet;
                int Po:= 1;
                while Po < Ptot do 
                packet:= queue.coopt;
                hold(serve.sample);
                packet.schedule(0);
                
        end;
        
        Ptot =1000;
        
        setseed(33427485);

        Send:-new NegExp("Sending intensity", 0.1);
        Serve:- new NegExp("Serving intensity", 1);
        delay:= new Tally("Total time in queue");
        sessionLength:- new Tally("Total session length");
        queue := new waitQ("Queue");



        numreplica:=20;

        WHILE replication LE numreplica DO
        begin


            delay.reset;


            User1:- new User("User1", Ptot, Send, buffer);
            User2:- new User("User2", Send);
            User3:- new User("User3", Send);    
            
            Pi:- new Count("Count Input");
            Po:- new Count("Count Output");


            User1.schedule(0);
            User2.schedule(0);
            User3.schedule(0);
            
    

            New Server("Server").schedule(0);

            Hold(60*60*24);

            totalUp:=totalUp+upTime.sum;
            totalDown:=totalDown+downTime.sum;

            Tilgjengelig.update(upTime.sum/(upTime.sum+downTime.sum));

            if numreplica > 2 then noreport;

            replicate;
        end;

        if numreplica < 3 then norepli;

    end;
end;

