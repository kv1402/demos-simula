begin
	external class demos="/usr/local/share/cim/demos.atr";
	demos
	begin
        
        ref(WAITQ) queue;
        ref(Tally) delay_, sessionLength;
        ref(RDist) Send, serve;
        ref(Network) network_;
        ref(WindowControl) window_;
        ref(BIN) SessTerm;
        ref(RES) window;
        integer Ptot, lastDelay, dmax;
        
        Entity class User;
            begin
                ref(Bin) buffer;
                integer Pi;
                real SessionStart;
                buffer :- new Bin("buffer", 0);
                Pi := 0;
                
                SessionStart:= time;
                A:
                        if Pi < Ptot then begin
                        	Pi:=Pi+1;
                                new Packet(edit("packet",Pi), buffer).schedule(now);
                                hold(Send.sample); 
                                Goto A;
                        end;
                        
                buffer.take(1000);
                sessionLength.update(time-SessionStart);
                SessTerm.give(1);
                 end;


         Entity class Packet(buffer);
         ref(Bin) buffer;             
         begin
              	Real timestamp;
                window.acquire(1);
                timestamp:= time;
                queue.wait;
                delay_.update(time-timestamp);
                lastDelay:=time-timestamp;
                window_.interrupt(1);
                window.release(1);
                buffer.give(1);
        end;


        Entity class Network;
        begin
                ref(Packet) packet_;
                integer Po;
                Po:= 0;
                while Po < 3*Ptot do begin
		  Po:=Po+1;
		  packet_:- queue.coopt;
		  hold(serve.sample);
		  packet_.schedule(0);
                end;
                
        end;
        
        Entity class WindowControl;
        begin
        	integer w, x;
        	w := 3;
        	window.acquire(2997);
        	loop:
		    hold(1000);
		    if interrupted > 0 then begin
        		if lastDelay <= dmax then begin
			    window.release(1);
			    w := w + 1;
        		end
			else begin
			    x := (w+1)/2;
			    window.acquire(x);
			    w := w - (w + 1)/2;
        	   	end;
        	   	window_.interrupt(0);
		    end;
        	repeat;
       
          end;
        		
        
        
        Ptot :=1000;
        dmax:=0.1;
        lastDelay:=0;
        trace;

        delay_:- new Tally("TimeinQ");
        sessionLength:- new Tally("SessionLength");
        Send:-new NegExp("Sending intensity", 50);
        Serve:- new NegExp("Serving intensity", 60);
        queue :- new waitQ("Queue");
        SessTerm :- new Bin("Termin", 0);
	window :- new RES("buffer",3000);  

	New network("Network").schedule(0);
	window_ :- New WindowControl("Window");
	window_.schedule(0);
	new User("User1").schedule(0);
	new User("User2").schedule(0);
	new User("User3").schedule(0);  
	

	SessTerm.take(3);

    end;
end;
